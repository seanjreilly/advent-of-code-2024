package day22

import org.junit.jupiter.api.Test

class Day22SolutionTest {
    private val sampleInput = """
        1
        10
        100
        2024
    """.trimIndent().lines()

    private val nextTenSecretNumbersFor123 = """
        15887950
        16495136
        527345
        704524
        1553684
        12683156
        11100544
        12249484
        7753432
        5908254
    """.trimIndent().lines()

    private val sampleInitialAnd2000thSecretNumbers = mapOf(
        1 to 8685429L,
        10 to 4700978L,
        100 to 15273692L,
        2024 to 8667524L,
    )

    private val solution = Day22Solution()
    
    @Test
    fun `mix should calculate the bitwise XOR of a value and a secret number`() {
        val secretNumber = 42L
        val numberToMix = 15L
        val expectedNewSecretNumber = 37L

        val result: Long = mix(numberToMix, secretNumber)

        assert(result == expectedNewSecretNumber)
    }

    @Test
    fun `prune should calculate the secret number modulo 16777216`() {
        val secretNumber = 100000000L
        val expectedNewSecretNumber = 16113920L

        val result: Long = prune(secretNumber)

        assert(result == expectedNewSecretNumber)
    }

    @Test
    fun `nextSecretNumber should multiply by 64, mix & prune, divide by 32, mix & prune, and multiply by 2048, mix & prune`() {
        val secretNumber = 123L
        val expectedResult = nextTenSecretNumbersFor123.first().toLong()

        val result: Long = nextSecretNumber(secretNumber)

        assert(result == expectedResult)
    }

    @Test
    fun `nextSecretNumber should provide the correct results for the first 10 rounds given 123`() {
        val initialSecretNumber = 123L
        val expectedResults = listOf(initialSecretNumber) + nextTenSecretNumbersFor123.map { it.toLong() }

        expectedResults.windowed(2).forEach { (current, next) ->
            val result = nextSecretNumber(current)
            assert(result == next)
        }
    }

    @Test
    fun `nextSecretNumberAfterNRounds should calculate the secret number after 10 rounds given a starting secret`() {
        assert(nextSecretNumberAfterNRounds(123L, 10) == 5908254L)
    }

    @Test
    fun `nextSecretNumberAfterNRounds should calculate the secret number after 2000 rounds given a starting secret and a number of rounds`() {
        sampleInitialAnd2000thSecretNumbers.forEach { (initialValue, expectedResult) ->
            assert(nextSecretNumberAfterNRounds(initialValue.toLong(), 2000) == expectedResult)
        }
    }
    
    @Test
    fun `part1 should calculate the sum of the 2000th secret number generated by each buyer`() {
        assert(solution.part1(sampleInput) == 37327623L)
    }
}